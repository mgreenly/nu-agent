#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# DuckDB version to install
DUCKDB_VERSION="1.4.1"
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
INSTALL_DIR="${PROJECT_ROOT}/vendor/duckdb"
DUCKDB_LIB="${INSTALL_DIR}/lib/libduckdb.so"
DUCKDB_HEADER="${INSTALL_DIR}/include/duckdb.h"

echo -e "${BLUE}==>${NC} Setting up nu-agent development environment..."

# Function to detect platform
detect_platform() {
    local os=$(uname -s | tr '[:upper:]' '[:lower:]')
    local arch=$(uname -m)

    case "$os" in
        linux*)
            if [ "$arch" = "x86_64" ]; then
                echo "linux-amd64"
            elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
                echo "linux-aarch64"
            else
                echo "unknown"
            fi
            ;;
        darwin*)
            if [ "$arch" = "x86_64" ]; then
                echo "osx-universal"
            elif [ "$arch" = "arm64" ]; then
                echo "osx-universal"
            else
                echo "unknown"
            fi
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

# Function to get DuckDB library extension
get_lib_extension() {
    local os=$(uname -s | tr '[:upper:]' '[:lower:]')
    case "$os" in
        linux*)
            echo "so"
            ;;
        darwin*)
            echo "dylib"
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

# Function to check if DuckDB is installed
check_duckdb_installed() {
    local lib_ext=$(get_lib_extension)
    local lib_path="${INSTALL_DIR}/lib/libduckdb.${lib_ext}"

    if [ -f "$lib_path" ] && [ -f "$DUCKDB_HEADER" ]; then
        echo -e "${GREEN}✓${NC} DuckDB library found at ${lib_path}"

        # Try to verify version
        if command -v ruby &> /dev/null; then
            local installed_version=$(ruby -rduckdb -e "db = DuckDB::Database.open; conn = db.connect; puts conn.query('PRAGMA version').to_a.first.first; conn.close; db.close" 2>/dev/null || echo "unknown")
            if [ "$installed_version" != "unknown" ]; then
                echo -e "${GREEN}✓${NC} DuckDB version: ${installed_version}"
                if [ "$installed_version" = "v${DUCKDB_VERSION}" ]; then
                    return 0
                else
                    echo -e "${YELLOW}!${NC} Warning: Installed version (${installed_version}) differs from target (v${DUCKDB_VERSION})"
                    read -p "Do you want to reinstall DuckDB v${DUCKDB_VERSION}? (y/n) " -n 1 -r
                    echo
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        return 1
                    fi
                    return 0
                fi
            fi
        fi
        return 0
    fi
    return 1
}

# Function to install DuckDB
install_duckdb() {
    local platform=$(detect_platform)

    if [ "$platform" = "unknown" ]; then
        echo -e "${RED}✗${NC} Unsupported platform: $(uname -s) $(uname -m)"
        echo "Please install DuckDB manually from https://duckdb.org/docs/installation/"
        exit 1
    fi

    local lib_ext=$(get_lib_extension)
    echo -e "${BLUE}==>${NC} Installing DuckDB v${DUCKDB_VERSION} for ${platform}..."

    # Create directories
    mkdir -p "${INSTALL_DIR}/lib" "${INSTALL_DIR}/include"

    # Download URL
    local download_url="https://github.com/duckdb/duckdb/releases/download/v${DUCKDB_VERSION}/libduckdb-${platform}.zip"
    local temp_dir=$(mktemp -d)
    local zip_file="${temp_dir}/libduckdb.zip"

    echo -e "${BLUE}==>${NC} Downloading from ${download_url}..."
    if command -v curl &> /dev/null; then
        curl -L -o "$zip_file" "$download_url" || {
            echo -e "${RED}✗${NC} Failed to download DuckDB"
            rm -rf "$temp_dir"
            exit 1
        }
    elif command -v wget &> /dev/null; then
        wget -O "$zip_file" "$download_url" || {
            echo -e "${RED}✗${NC} Failed to download DuckDB"
            rm -rf "$temp_dir"
            exit 1
        }
    else
        echo -e "${RED}✗${NC} Neither curl nor wget found. Please install one of them."
        rm -rf "$temp_dir"
        exit 1
    fi

    echo -e "${BLUE}==>${NC} Extracting DuckDB files..."
    unzip -q "$zip_file" -d "$temp_dir" || {
        echo -e "${RED}✗${NC} Failed to extract DuckDB archive"
        rm -rf "$temp_dir"
        exit 1
    }

    # Copy files to install directory
    if [ -f "${temp_dir}/libduckdb.${lib_ext}" ]; then
        cp "${temp_dir}/libduckdb.${lib_ext}" "${INSTALL_DIR}/lib/"
        chmod +x "${INSTALL_DIR}/lib/libduckdb.${lib_ext}"
        echo -e "${GREEN}✓${NC} Installed library to ${INSTALL_DIR}/lib/libduckdb.${lib_ext}"
    else
        echo -e "${RED}✗${NC} libduckdb.${lib_ext} not found in archive"
        rm -rf "$temp_dir"
        exit 1
    fi

    if [ -f "${temp_dir}/duckdb.h" ]; then
        cp "${temp_dir}/duckdb.h" "${INSTALL_DIR}/include/"
        echo -e "${GREEN}✓${NC} Installed header to ${INSTALL_DIR}/include/duckdb.h"
    else
        echo -e "${RED}✗${NC} duckdb.h not found in archive"
        rm -rf "$temp_dir"
        exit 1
    fi

    if [ -f "${temp_dir}/duckdb.hpp" ]; then
        cp "${temp_dir}/duckdb.hpp" "${INSTALL_DIR}/include/"
        echo -e "${GREEN}✓${NC} Installed C++ header to ${INSTALL_DIR}/include/duckdb.hpp"
    fi

    # Clean up
    rm -rf "$temp_dir"
    echo -e "${GREEN}✓${NC} DuckDB v${DUCKDB_VERSION} installed successfully"
}

# Check and install DuckDB if needed
if ! check_duckdb_installed; then
    echo -e "${YELLOW}!${NC} DuckDB not found or version mismatch"
    install_duckdb
fi

# Configure bundler to use local DuckDB
echo -e "${BLUE}==>${NC} Configuring bundler for DuckDB..."
bundle config build.duckdb \
    --with-duckdb-include="${INSTALL_DIR}/include" \
    --with-duckdb-lib="${INSTALL_DIR}/lib"
echo -e "${GREEN}✓${NC} Bundler configured"

# Install dependencies
echo -e "${BLUE}==>${NC} Installing Ruby dependencies..."
bundle install

echo -e "${GREEN}✓${NC} Setup complete!"
echo ""
echo "You can now run: ./exe/nu-agent"
